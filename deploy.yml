# Ansible playbook for deploying a Flask app
---
# Install system yum packages
- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
  # - name: Set yum as package manager
  #   set_fact:
  #     ansible_facts:
  #       pkg_mgr: yum

  - name: Update Yum
    yum:
      state: latest

  # - name: Install amazon-linux-extras epel
  #   shell: "amazon-linux-extras install epel"
  #   become: yes
  #   become_method: sudo

  - name: Install list of core packages
    yum:
      name:
        - epel-release
        - tree
        - git
        - python3-pip
        - python3-devel
        - nginx
      state: present

  - name: Update pip3
    pip:
      name:
        - pip
        - setuptools
        - wheel
      executable:  /usr/local/bin/pip3
      state: latest

  - name: Install virtualenv
    pip:
      name: virtualenv
      executable:  /usr/local/bin/pip3
      state: present

# Install the app, note: don't do these tasks with become sudo
- hosts: webservers
  tasks:
  - name: Clone repository
    git:
      repo: 'https://github.com/{{ github_user }}/{{ app_name }}.git'
      dest: /home/{{ ansible_ssh_user }}/{{ app_name }}
      update: yes  # Does a git pull if the repo already exists

  - name: Install modules in a virtualenv
    pip:
      requirements: /home/{{ ansible_ssh_user }}/{{ app_name }}/requirements.txt
      virtualenv: /home/{{ ansible_ssh_user }}/{{ app_name }}/env
      virtualenv_python: /usr/bin/python3

# Configure app systemd service and nginx
- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
  - name: template systemd service config
    template:
      src: .service
      dest: /etc/systemd/system/{{ app_name }}.service

  - name: Start systemd app service
    systemd: name={{ app_name }}.service state=restarted enabled=yes

  - name: Template nginx site config
    template:
      src: .nginx
      dest: /etc/nginx/conf.d/{{ app_name }}.conf
#
#   - name: Remove default nginx site config
#     file: path=/etc/nginx/conf.d/default.conf state=absent
#
  - name: Enable nginx site
    file:
      src: /etc/nginx/conf.d/{{ app_name }}.conf
      dest: /etc/nginx/default.d/default.conf
      state: link
      force: yes
      follow: yes

  - name: Restart nginx
    systemd: name=nginx state=restarted enabled=yes

  - name: Open firewall for nginx
    ufw:
      rule: allow
      name: Nginx Full

# # Run a quick test to verify the site is working
# - hosts: webservers
#   tasks:
#   - name: get url
#     get_url:
#       url: http://{{inventory_hostname}}
#       dest: /tmp/index.html
#   - name: read html
#     shell: cat /tmp/index.html
#     register: html_contents
#   - name: check for string in html
#     when: html_contents.stdout.find('hello') != -1
#     debug: msg="success!"
